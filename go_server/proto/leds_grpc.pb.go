// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: leds.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DodoledServiceClient is the client API for DodoledService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DodoledServiceClient interface {
	RBPairing(ctx context.Context, in *RBPairingRequest, opts ...grpc.CallOption) (*RBPairingResponse, error)
	AppGetPotentialDevices(ctx context.Context, in *AppGetDevicesRequest, opts ...grpc.CallOption) (*AppGetDevicesResponse, error)
	AppGetPairedDevices(ctx context.Context, in *AppGetDevicesRequest, opts ...grpc.CallOption) (*AppGetDevicesResponse, error)
	AppPairing(ctx context.Context, in *AppPairingRequest, opts ...grpc.CallOption) (*AppPairingResponse, error)
	GetAnimation(ctx context.Context, in *GetAnimationRequest, opts ...grpc.CallOption) (*GetAnimationResponse, error)
	RegisterAnimation(ctx context.Context, in *Animation, opts ...grpc.CallOption) (*RegisterAnimationResponse, error)
	UnpairDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*AppPairingResponse, error)
	GetDeviceControl(ctx context.Context, in *GetDeviceControlRequest, opts ...grpc.CallOption) (*GetDeviceControlResponse, error)
	SetDeviceControl(ctx context.Context, in *SetDeviceControlRequest, opts ...grpc.CallOption) (*SetDeviceControlResponse, error)
	DeviceConnection(ctx context.Context, in *DeviceConnectionRequest, opts ...grpc.CallOption) (DodoledService_DeviceConnectionClient, error)
}

type dodoledServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDodoledServiceClient(cc grpc.ClientConnInterface) DodoledServiceClient {
	return &dodoledServiceClient{cc}
}

func (c *dodoledServiceClient) RBPairing(ctx context.Context, in *RBPairingRequest, opts ...grpc.CallOption) (*RBPairingResponse, error) {
	out := new(RBPairingResponse)
	err := c.cc.Invoke(ctx, "/leds.DodoledService/RBPairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dodoledServiceClient) AppGetPotentialDevices(ctx context.Context, in *AppGetDevicesRequest, opts ...grpc.CallOption) (*AppGetDevicesResponse, error) {
	out := new(AppGetDevicesResponse)
	err := c.cc.Invoke(ctx, "/leds.DodoledService/AppGetPotentialDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dodoledServiceClient) AppGetPairedDevices(ctx context.Context, in *AppGetDevicesRequest, opts ...grpc.CallOption) (*AppGetDevicesResponse, error) {
	out := new(AppGetDevicesResponse)
	err := c.cc.Invoke(ctx, "/leds.DodoledService/AppGetPairedDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dodoledServiceClient) AppPairing(ctx context.Context, in *AppPairingRequest, opts ...grpc.CallOption) (*AppPairingResponse, error) {
	out := new(AppPairingResponse)
	err := c.cc.Invoke(ctx, "/leds.DodoledService/AppPairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dodoledServiceClient) GetAnimation(ctx context.Context, in *GetAnimationRequest, opts ...grpc.CallOption) (*GetAnimationResponse, error) {
	out := new(GetAnimationResponse)
	err := c.cc.Invoke(ctx, "/leds.DodoledService/GetAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dodoledServiceClient) RegisterAnimation(ctx context.Context, in *Animation, opts ...grpc.CallOption) (*RegisterAnimationResponse, error) {
	out := new(RegisterAnimationResponse)
	err := c.cc.Invoke(ctx, "/leds.DodoledService/RegisterAnimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dodoledServiceClient) UnpairDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*AppPairingResponse, error) {
	out := new(AppPairingResponse)
	err := c.cc.Invoke(ctx, "/leds.DodoledService/UnpairDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dodoledServiceClient) GetDeviceControl(ctx context.Context, in *GetDeviceControlRequest, opts ...grpc.CallOption) (*GetDeviceControlResponse, error) {
	out := new(GetDeviceControlResponse)
	err := c.cc.Invoke(ctx, "/leds.DodoledService/GetDeviceControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dodoledServiceClient) SetDeviceControl(ctx context.Context, in *SetDeviceControlRequest, opts ...grpc.CallOption) (*SetDeviceControlResponse, error) {
	out := new(SetDeviceControlResponse)
	err := c.cc.Invoke(ctx, "/leds.DodoledService/SetDeviceControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dodoledServiceClient) DeviceConnection(ctx context.Context, in *DeviceConnectionRequest, opts ...grpc.CallOption) (DodoledService_DeviceConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &DodoledService_ServiceDesc.Streams[0], "/leds.DodoledService/DeviceConnection", opts...)
	if err != nil {
		return nil, err
	}
	x := &dodoledServiceDeviceConnectionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DodoledService_DeviceConnectionClient interface {
	Recv() (*DeviceConnectionResponse, error)
	grpc.ClientStream
}

type dodoledServiceDeviceConnectionClient struct {
	grpc.ClientStream
}

func (x *dodoledServiceDeviceConnectionClient) Recv() (*DeviceConnectionResponse, error) {
	m := new(DeviceConnectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DodoledServiceServer is the server API for DodoledService service.
// All implementations must embed UnimplementedDodoledServiceServer
// for forward compatibility
type DodoledServiceServer interface {
	RBPairing(context.Context, *RBPairingRequest) (*RBPairingResponse, error)
	AppGetPotentialDevices(context.Context, *AppGetDevicesRequest) (*AppGetDevicesResponse, error)
	AppGetPairedDevices(context.Context, *AppGetDevicesRequest) (*AppGetDevicesResponse, error)
	AppPairing(context.Context, *AppPairingRequest) (*AppPairingResponse, error)
	GetAnimation(context.Context, *GetAnimationRequest) (*GetAnimationResponse, error)
	RegisterAnimation(context.Context, *Animation) (*RegisterAnimationResponse, error)
	UnpairDevice(context.Context, *Device) (*AppPairingResponse, error)
	GetDeviceControl(context.Context, *GetDeviceControlRequest) (*GetDeviceControlResponse, error)
	SetDeviceControl(context.Context, *SetDeviceControlRequest) (*SetDeviceControlResponse, error)
	DeviceConnection(*DeviceConnectionRequest, DodoledService_DeviceConnectionServer) error
	mustEmbedUnimplementedDodoledServiceServer()
}

// UnimplementedDodoledServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDodoledServiceServer struct {
}

func (UnimplementedDodoledServiceServer) RBPairing(context.Context, *RBPairingRequest) (*RBPairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RBPairing not implemented")
}
func (UnimplementedDodoledServiceServer) AppGetPotentialDevices(context.Context, *AppGetDevicesRequest) (*AppGetDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppGetPotentialDevices not implemented")
}
func (UnimplementedDodoledServiceServer) AppGetPairedDevices(context.Context, *AppGetDevicesRequest) (*AppGetDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppGetPairedDevices not implemented")
}
func (UnimplementedDodoledServiceServer) AppPairing(context.Context, *AppPairingRequest) (*AppPairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppPairing not implemented")
}
func (UnimplementedDodoledServiceServer) GetAnimation(context.Context, *GetAnimationRequest) (*GetAnimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimation not implemented")
}
func (UnimplementedDodoledServiceServer) RegisterAnimation(context.Context, *Animation) (*RegisterAnimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAnimation not implemented")
}
func (UnimplementedDodoledServiceServer) UnpairDevice(context.Context, *Device) (*AppPairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpairDevice not implemented")
}
func (UnimplementedDodoledServiceServer) GetDeviceControl(context.Context, *GetDeviceControlRequest) (*GetDeviceControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceControl not implemented")
}
func (UnimplementedDodoledServiceServer) SetDeviceControl(context.Context, *SetDeviceControlRequest) (*SetDeviceControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceControl not implemented")
}
func (UnimplementedDodoledServiceServer) DeviceConnection(*DeviceConnectionRequest, DodoledService_DeviceConnectionServer) error {
	return status.Errorf(codes.Unimplemented, "method DeviceConnection not implemented")
}
func (UnimplementedDodoledServiceServer) mustEmbedUnimplementedDodoledServiceServer() {}

// UnsafeDodoledServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DodoledServiceServer will
// result in compilation errors.
type UnsafeDodoledServiceServer interface {
	mustEmbedUnimplementedDodoledServiceServer()
}

func RegisterDodoledServiceServer(s grpc.ServiceRegistrar, srv DodoledServiceServer) {
	s.RegisterService(&DodoledService_ServiceDesc, srv)
}

func _DodoledService_RBPairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RBPairingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DodoledServiceServer).RBPairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leds.DodoledService/RBPairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DodoledServiceServer).RBPairing(ctx, req.(*RBPairingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DodoledService_AppGetPotentialDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppGetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DodoledServiceServer).AppGetPotentialDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leds.DodoledService/AppGetPotentialDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DodoledServiceServer).AppGetPotentialDevices(ctx, req.(*AppGetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DodoledService_AppGetPairedDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppGetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DodoledServiceServer).AppGetPairedDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leds.DodoledService/AppGetPairedDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DodoledServiceServer).AppGetPairedDevices(ctx, req.(*AppGetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DodoledService_AppPairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppPairingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DodoledServiceServer).AppPairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leds.DodoledService/AppPairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DodoledServiceServer).AppPairing(ctx, req.(*AppPairingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DodoledService_GetAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DodoledServiceServer).GetAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leds.DodoledService/GetAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DodoledServiceServer).GetAnimation(ctx, req.(*GetAnimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DodoledService_RegisterAnimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Animation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DodoledServiceServer).RegisterAnimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leds.DodoledService/RegisterAnimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DodoledServiceServer).RegisterAnimation(ctx, req.(*Animation))
	}
	return interceptor(ctx, in, info, handler)
}

func _DodoledService_UnpairDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DodoledServiceServer).UnpairDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leds.DodoledService/UnpairDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DodoledServiceServer).UnpairDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DodoledService_GetDeviceControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DodoledServiceServer).GetDeviceControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leds.DodoledService/GetDeviceControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DodoledServiceServer).GetDeviceControl(ctx, req.(*GetDeviceControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DodoledService_SetDeviceControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DodoledServiceServer).SetDeviceControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leds.DodoledService/SetDeviceControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DodoledServiceServer).SetDeviceControl(ctx, req.(*SetDeviceControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DodoledService_DeviceConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceConnectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DodoledServiceServer).DeviceConnection(m, &dodoledServiceDeviceConnectionServer{stream})
}

type DodoledService_DeviceConnectionServer interface {
	Send(*DeviceConnectionResponse) error
	grpc.ServerStream
}

type dodoledServiceDeviceConnectionServer struct {
	grpc.ServerStream
}

func (x *dodoledServiceDeviceConnectionServer) Send(m *DeviceConnectionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DodoledService_ServiceDesc is the grpc.ServiceDesc for DodoledService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DodoledService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leds.DodoledService",
	HandlerType: (*DodoledServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RBPairing",
			Handler:    _DodoledService_RBPairing_Handler,
		},
		{
			MethodName: "AppGetPotentialDevices",
			Handler:    _DodoledService_AppGetPotentialDevices_Handler,
		},
		{
			MethodName: "AppGetPairedDevices",
			Handler:    _DodoledService_AppGetPairedDevices_Handler,
		},
		{
			MethodName: "AppPairing",
			Handler:    _DodoledService_AppPairing_Handler,
		},
		{
			MethodName: "GetAnimation",
			Handler:    _DodoledService_GetAnimation_Handler,
		},
		{
			MethodName: "RegisterAnimation",
			Handler:    _DodoledService_RegisterAnimation_Handler,
		},
		{
			MethodName: "UnpairDevice",
			Handler:    _DodoledService_UnpairDevice_Handler,
		},
		{
			MethodName: "GetDeviceControl",
			Handler:    _DodoledService_GetDeviceControl_Handler,
		},
		{
			MethodName: "SetDeviceControl",
			Handler:    _DodoledService_SetDeviceControl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeviceConnection",
			Handler:       _DodoledService_DeviceConnection_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "leds.proto",
}
